spring.application.name=Joosik_Pro

spring.datasource.url=jdbc:mysql://localhost:3306/joo_pro?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.generate_statistics=true
spring.datasource.initialization-mode=always

spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

spring.data.redis.host=localhost
spring.data.redis.port=6379

# API
koreainvest.api.first.url=https://openapivts.koreainvestment.com:29443/uapi/overseas-price/v1/quotations/price
koreainvest.first.tr_id=HHDFS00000300

koreainvest.api.second.url=https://openapivts.koreainvestment.com:29443/uapi/domestic-stock/v1/quotations/inquire-price
koreainvest.second.tr_id=FHKST01010100


koreainvest.appkey=???
koreainvest.appsecret=???
koreainvest.auth.token=???

management.endpoints.web.exposure.include=prometheus

apis.data.url=https://apis.data.go.kr/1160100/service/GetKrxListedInfoService/getItemInfo
apis.data.serviceKey=49OUcV1PdM5XSdpy%2BOXD%2B4TT4Lp6Y6u9Qqa41%2BHaa6srUXARM%2BZdBH1jtj8cYzkHPWfDYEKUxURqj1awABocqA%3D%3D

scheduler.topview.cron=0 * * * * *

spring.batch.jdbc.initialize-schema=always

# Kafka ??? ??
spring.kafka.bootstrap-servers=localhost:9092

# ?? ?? ??
# logging.level.org.apache.kafka=DEBUG
# logging.level.org.springframework.kafka=DEBUG

# ??? ?? ??
# spring.kafka.consumer.auto-offset-reset=earliest
# spring.kafka.consumer.enable-auto-commit=true

# Producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Consumer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# topic
FirstComeEventAttend.kafka.topic=attend-event-participants
FirstComeEventSave.kafka.topic=save-event-participants
stock.kafka.topic=live-stock-price

#groupId
FirstComeEventSaveAttend.kafka.consumer.group-id=participant-attend-group
FirstComeEventSave.kafka.consumer.group-id=participant-saver-group
spring.kafka.consumer.group-id=stock-data-group

#tomcat_thread metrics ??
server.tomcat.mbeanregistry.enabled=true

#server.tomcat.max-threads=500
#server.tomcat.accept-count=1000
#spring.datasource.hikari.maximum-pool-size=50
#spring.datasource.hikari.minimum-idle=20